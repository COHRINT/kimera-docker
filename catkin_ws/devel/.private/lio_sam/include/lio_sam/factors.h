// Generated by gencpp from file lio_sam/factors.msg
// DO NOT EDIT!


#ifndef LIO_SAM_MESSAGE_FACTORS_H
#define LIO_SAM_MESSAGE_FACTORS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lio_sam
{
template <class ContainerAllocator>
struct factors_
{
  typedef factors_<ContainerAllocator> Type;

  factors_()
    : keys()
    , informationMatrix()
    , informationMatrixDim(0)
    , covarianceMatrix()
    , covarianceMatrixDim(0)
    , mean()
    , numMeans(0)  {
    }
  factors_(const ContainerAllocator& _alloc)
    : keys(_alloc)
    , informationMatrix(_alloc)
    , informationMatrixDim(0)
    , covarianceMatrix(_alloc)
    , covarianceMatrixDim(0)
    , mean(_alloc)
    , numMeans(0)  {
  (void)_alloc;
    }



   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _keys_type;
  _keys_type keys;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _informationMatrix_type;
  _informationMatrix_type informationMatrix;

   typedef int16_t _informationMatrixDim_type;
  _informationMatrixDim_type informationMatrixDim;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _covarianceMatrix_type;
  _covarianceMatrix_type covarianceMatrix;

   typedef int16_t _covarianceMatrixDim_type;
  _covarianceMatrixDim_type covarianceMatrixDim;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _mean_type;
  _mean_type mean;

   typedef int16_t _numMeans_type;
  _numMeans_type numMeans;





  typedef boost::shared_ptr< ::lio_sam::factors_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lio_sam::factors_<ContainerAllocator> const> ConstPtr;

}; // struct factors_

typedef ::lio_sam::factors_<std::allocator<void> > factors;

typedef boost::shared_ptr< ::lio_sam::factors > factorsPtr;
typedef boost::shared_ptr< ::lio_sam::factors const> factorsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lio_sam::factors_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lio_sam::factors_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lio_sam::factors_<ContainerAllocator1> & lhs, const ::lio_sam::factors_<ContainerAllocator2> & rhs)
{
  return lhs.keys == rhs.keys &&
    lhs.informationMatrix == rhs.informationMatrix &&
    lhs.informationMatrixDim == rhs.informationMatrixDim &&
    lhs.covarianceMatrix == rhs.covarianceMatrix &&
    lhs.covarianceMatrixDim == rhs.covarianceMatrixDim &&
    lhs.mean == rhs.mean &&
    lhs.numMeans == rhs.numMeans;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lio_sam::factors_<ContainerAllocator1> & lhs, const ::lio_sam::factors_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lio_sam

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lio_sam::factors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lio_sam::factors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lio_sam::factors_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lio_sam::factors_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lio_sam::factors_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lio_sam::factors_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lio_sam::factors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "132517768e54222e9cb7f7948cccc70e";
  }

  static const char* value(const ::lio_sam::factors_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x132517768e54222eULL;
  static const uint64_t static_value2 = 0x9cb7f7948cccc70eULL;
};

template<class ContainerAllocator>
struct DataType< ::lio_sam::factors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lio_sam/factors";
  }

  static const char* value(const ::lio_sam::factors_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lio_sam::factors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16[] keys\n"
"float32[] informationMatrix\n"
"int16 informationMatrixDim\n"
"float32[] covarianceMatrix\n"
"int16 covarianceMatrixDim\n"
"float32[] mean\n"
"int16 numMeans\n"
;
  }

  static const char* value(const ::lio_sam::factors_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lio_sam::factors_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.keys);
      stream.next(m.informationMatrix);
      stream.next(m.informationMatrixDim);
      stream.next(m.covarianceMatrix);
      stream.next(m.covarianceMatrixDim);
      stream.next(m.mean);
      stream.next(m.numMeans);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct factors_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lio_sam::factors_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lio_sam::factors_<ContainerAllocator>& v)
  {
    s << indent << "keys[]" << std::endl;
    for (size_t i = 0; i < v.keys.size(); ++i)
    {
      s << indent << "  keys[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.keys[i]);
    }
    s << indent << "informationMatrix[]" << std::endl;
    for (size_t i = 0; i < v.informationMatrix.size(); ++i)
    {
      s << indent << "  informationMatrix[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.informationMatrix[i]);
    }
    s << indent << "informationMatrixDim: ";
    Printer<int16_t>::stream(s, indent + "  ", v.informationMatrixDim);
    s << indent << "covarianceMatrix[]" << std::endl;
    for (size_t i = 0; i < v.covarianceMatrix.size(); ++i)
    {
      s << indent << "  covarianceMatrix[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.covarianceMatrix[i]);
    }
    s << indent << "covarianceMatrixDim: ";
    Printer<int16_t>::stream(s, indent + "  ", v.covarianceMatrixDim);
    s << indent << "mean[]" << std::endl;
    for (size_t i = 0; i < v.mean.size(); ++i)
    {
      s << indent << "  mean[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.mean[i]);
    }
    s << indent << "numMeans: ";
    Printer<int16_t>::stream(s, indent + "  ", v.numMeans);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIO_SAM_MESSAGE_FACTORS_H

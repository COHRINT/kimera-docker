// Generated by gencpp from file lio_sam/ChannelFilter.msg
// DO NOT EDIT!


#ifndef LIO_SAM_MESSAGE_CHANNELFILTER_H
#define LIO_SAM_MESSAGE_CHANNELFILTER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lio_sam
{
template <class ContainerAllocator>
struct ChannelFilter_
{
  typedef ChannelFilter_<ContainerAllocator> Type;

  ChannelFilter_()
    : sender(0)
    , recipient(0)
    , dims()
    , matrixDim(0)
    , infMat()
    , infVec()  {
    }
  ChannelFilter_(const ContainerAllocator& _alloc)
    : sender(0)
    , recipient(0)
    , dims(_alloc)
    , matrixDim(0)
    , infMat(_alloc)
    , infVec(_alloc)  {
  (void)_alloc;
    }



   typedef int16_t _sender_type;
  _sender_type sender;

   typedef int16_t _recipient_type;
  _recipient_type recipient;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _dims_type;
  _dims_type dims;

   typedef int16_t _matrixDim_type;
  _matrixDim_type matrixDim;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _infMat_type;
  _infMat_type infMat;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _infVec_type;
  _infVec_type infVec;





  typedef boost::shared_ptr< ::lio_sam::ChannelFilter_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lio_sam::ChannelFilter_<ContainerAllocator> const> ConstPtr;

}; // struct ChannelFilter_

typedef ::lio_sam::ChannelFilter_<std::allocator<void> > ChannelFilter;

typedef boost::shared_ptr< ::lio_sam::ChannelFilter > ChannelFilterPtr;
typedef boost::shared_ptr< ::lio_sam::ChannelFilter const> ChannelFilterConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lio_sam::ChannelFilter_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lio_sam::ChannelFilter_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lio_sam::ChannelFilter_<ContainerAllocator1> & lhs, const ::lio_sam::ChannelFilter_<ContainerAllocator2> & rhs)
{
  return lhs.sender == rhs.sender &&
    lhs.recipient == rhs.recipient &&
    lhs.dims == rhs.dims &&
    lhs.matrixDim == rhs.matrixDim &&
    lhs.infMat == rhs.infMat &&
    lhs.infVec == rhs.infVec;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lio_sam::ChannelFilter_<ContainerAllocator1> & lhs, const ::lio_sam::ChannelFilter_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lio_sam

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lio_sam::ChannelFilter_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lio_sam::ChannelFilter_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lio_sam::ChannelFilter_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lio_sam::ChannelFilter_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lio_sam::ChannelFilter_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lio_sam::ChannelFilter_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lio_sam::ChannelFilter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "87e5f6005f50505b9be672729f6ad269";
  }

  static const char* value(const ::lio_sam::ChannelFilter_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x87e5f6005f50505bULL;
  static const uint64_t static_value2 = 0x9be672729f6ad269ULL;
};

template<class ContainerAllocator>
struct DataType< ::lio_sam::ChannelFilter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lio_sam/ChannelFilter";
  }

  static const char* value(const ::lio_sam::ChannelFilter_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lio_sam::ChannelFilter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 sender\n"
"int16 recipient\n"
"string[] dims\n"
"int16 matrixDim\n"
"float64[] infMat\n"
"float64[] infVec\n"
;
  }

  static const char* value(const ::lio_sam::ChannelFilter_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lio_sam::ChannelFilter_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sender);
      stream.next(m.recipient);
      stream.next(m.dims);
      stream.next(m.matrixDim);
      stream.next(m.infMat);
      stream.next(m.infVec);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ChannelFilter_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lio_sam::ChannelFilter_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lio_sam::ChannelFilter_<ContainerAllocator>& v)
  {
    s << indent << "sender: ";
    Printer<int16_t>::stream(s, indent + "  ", v.sender);
    s << indent << "recipient: ";
    Printer<int16_t>::stream(s, indent + "  ", v.recipient);
    s << indent << "dims[]" << std::endl;
    for (size_t i = 0; i < v.dims.size(); ++i)
    {
      s << indent << "  dims[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.dims[i]);
    }
    s << indent << "matrixDim: ";
    Printer<int16_t>::stream(s, indent + "  ", v.matrixDim);
    s << indent << "infMat[]" << std::endl;
    for (size_t i = 0; i < v.infMat.size(); ++i)
    {
      s << indent << "  infMat[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.infMat[i]);
    }
    s << indent << "infVec[]" << std::endl;
    for (size_t i = 0; i < v.infVec.size(); ++i)
    {
      s << indent << "  infVec[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.infVec[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIO_SAM_MESSAGE_CHANNELFILTER_H

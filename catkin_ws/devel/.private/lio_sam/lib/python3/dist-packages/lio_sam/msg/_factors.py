# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lio_sam/factors.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class factors(genpy.Message):
  _md5sum = "132517768e54222e9cb7f7948cccc70e"
  _type = "lio_sam/factors"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int16[] keys
float32[] informationMatrix
int16 informationMatrixDim
float32[] covarianceMatrix
int16 covarianceMatrixDim
float32[] mean
int16 numMeans"""
  __slots__ = ['keys','informationMatrix','informationMatrixDim','covarianceMatrix','covarianceMatrixDim','mean','numMeans']
  _slot_types = ['int16[]','float32[]','int16','float32[]','int16','float32[]','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       keys,informationMatrix,informationMatrixDim,covarianceMatrix,covarianceMatrixDim,mean,numMeans

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(factors, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.keys is None:
        self.keys = []
      if self.informationMatrix is None:
        self.informationMatrix = []
      if self.informationMatrixDim is None:
        self.informationMatrixDim = 0
      if self.covarianceMatrix is None:
        self.covarianceMatrix = []
      if self.covarianceMatrixDim is None:
        self.covarianceMatrixDim = 0
      if self.mean is None:
        self.mean = []
      if self.numMeans is None:
        self.numMeans = 0
    else:
      self.keys = []
      self.informationMatrix = []
      self.informationMatrixDim = 0
      self.covarianceMatrix = []
      self.covarianceMatrixDim = 0
      self.mean = []
      self.numMeans = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.keys)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.Struct(pattern).pack(*self.keys))
      length = len(self.informationMatrix)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.informationMatrix))
      _x = self.informationMatrixDim
      buff.write(_get_struct_h().pack(_x))
      length = len(self.covarianceMatrix)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.covarianceMatrix))
      _x = self.covarianceMatrixDim
      buff.write(_get_struct_h().pack(_x))
      length = len(self.mean)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.mean))
      _x = self.numMeans
      buff.write(_get_struct_h().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.keys = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.informationMatrix = s.unpack(str[start:end])
      start = end
      end += 2
      (self.informationMatrixDim,) = _get_struct_h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.covarianceMatrix = s.unpack(str[start:end])
      start = end
      end += 2
      (self.covarianceMatrixDim,) = _get_struct_h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.mean = s.unpack(str[start:end])
      start = end
      end += 2
      (self.numMeans,) = _get_struct_h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.keys)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.keys.tostring())
      length = len(self.informationMatrix)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.informationMatrix.tostring())
      _x = self.informationMatrixDim
      buff.write(_get_struct_h().pack(_x))
      length = len(self.covarianceMatrix)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.covarianceMatrix.tostring())
      _x = self.covarianceMatrixDim
      buff.write(_get_struct_h().pack(_x))
      length = len(self.mean)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.mean.tostring())
      _x = self.numMeans
      buff.write(_get_struct_h().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.keys = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.informationMatrix = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 2
      (self.informationMatrixDim,) = _get_struct_h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.covarianceMatrix = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 2
      (self.covarianceMatrixDim,) = _get_struct_h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.mean = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 2
      (self.numMeans,) = _get_struct_h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_h = None
def _get_struct_h():
    global _struct_h
    if _struct_h is None:
        _struct_h = struct.Struct("<h")
    return _struct_h
